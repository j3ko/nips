name: Generate Dependency Graph

on:
  pull_request:
  
env:
  GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
  
jobs:
  generate_dependency_graph:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Graphviz
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Install Dependencies
        run: npm install @actions/github

      - name: Generate dependency graph
        run: |
          # Get list of modified Markdown files in PR
          files=( ./*.md )
          # Concatenate dependencies for all Markdown files
          dependencies=""
          for file in "${files[@]}"; do
            # Get the list of dependencies
            deps=$(grep -o 'depends:[0-9]\+' "$file" | sort | uniq | sed "s/depends://" | awk -v f="${file/.\//NIP-}" '{sub(/\.md/, "", f); print "\"" f "\" -> \"NIP-" $1 "\""}')
            # Append the dependencies to the variable
            dependencies="$dependencies $deps"
          done
          # Output the dependency graph in the dot format
          echo "digraph nips { $dependencies }" | dot -Tpng -o dependencies.png

      - name: Push updated dependency graph
        uses: actions/github-script@v4
        with:
          script: |
            const branchName = `pr-${process.env.GITHUB_REF.split("/")[2]}`;
            const fs = require('fs');
            const { github } = require('@actions/github'); // fix here
            fs.writeFileSync('dependencies.png', fs.readFileSync('dependencies.png'));

            const octokit = new github.GitHub(process.env.WORKFLOW_TOKEN);
            github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            }).then(({ data: pull }) => {
              const headSha = pull.head.sha;
              return octokit.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branchName}`,
                sha: headSha
              });
            }).then(() => {
              return octokit.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.pull_request.number,
                name: 'dependencies.png',
                data: fs.readFileSync('dependencies.png')
              });
            }).then(() => {
              return octokit.pulls.updateBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                expected_head_sha: headSha,
                body: 'chore: update dependency graph',
              });
            });
